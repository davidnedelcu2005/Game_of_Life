#include "stive.h"
#include <stdio.h>
#include <stdlib.h>

Stack* createStack(int n)
{  Stack *s=(Stack*)malloc(sizeof(Stack));
    if(!s) return NULL;
    s->capacity=n;
    s->top=-1;
    s->v = (Data*) malloc(sizeof(Data)*s->capacity);
    if(!s->v) return NULL;
    return s;
 
}
 
int isFull(Stack *s)
{return (s->top+1 == s->capacity);}

int isEmpty(Stack *s)
{return (s->top==-1);}

void increaseCapacity(Stack* s) {
    int newCapacity = s->capacity * 2;
    Data* temp = (Data*) realloc(s->v, newCapacity * sizeof(Data));

    if (!temp) {
        printf("Eroare la realocare memorie!\n");
        return;
    }

    s->v = temp;
    s->capacity = newCapacity;
}



void push(Stack*s, Data x)
{  
   if(isFull(s)) increaseCapacity(s);
   s->v[++s->top]=x;

}

Data pop(Stack*s)
{if(!isEmpty(s)) return s->v[s->top--];
return INT_MIN;}


Data top(Stack*s)
{if(!isEmpty(s)) return s->v[s->top];
return INT_MIN;}

void deleteStack(Stack** s) {
    if (*s) {
        if ((*s)->v) {
            free((*s)->v);  // Eliberăm vectorul din stivă
            (*s)->v = NULL;
        }
        free(*s);  // Eliberăm structura stivei
        *s = NULL; // Setăm pointerul la NULL pentru siguranță
    }
}



void printStack(Stack *s) {
    if (s == NULL) {
        printf("Stiva nu mai există!\n");
        return;
    }
    
    if (isEmpty(s)) {
        printf("Stiva este goală!\n");
        return;
    }

    printf("Stiva (de sus în jos): ");
    for (int i = s->top; i >= 0; i--) {
        printf("%d ", s->v[i]);
    }
    printf("\n");
}